{"version":3,"sources":["components/CourseForm.js","components/CourseList.js","App.js","serviceWorker.js","index.js"],"names":["CourseForm","props","onSubmit","add","type","value","newCurrent","onChange","update","CourseList","state","isEdit","updateCourseItem","e","preventDefault","editCourses","i","input","toggleState","editForm","ref","v","defaultValue","details","name","setState","renderCourse","onClick","delete","Edit","this","Component","App","course","current","updateCourse","target","addCourse","currentValue","allCourses","alert","push","deleteCourse","index","all_courses","splice","editCourse","x","courseList","length","map","key","handleChaneg","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6MAYeA,G,MAVI,SAACC,GAEhB,OACI,0BAAMC,SAAUD,EAAME,KAClB,2BAAOC,KAAK,OAAOC,MAAOJ,EAAMK,WAAYC,SAAUN,EAAMO,SAC5D,4BAAQJ,KAAK,UAAb,iBCgDGK,E,4MAnDXC,MAAO,CACHC,QAAS,G,EAIbC,iBAAmB,SAAAC,GACfA,EAAEC,iBACF,EAAKb,MAAMc,YAAY,EAAKd,MAAMe,EAAG,EAAKC,MAAMZ,OAChD,EAAKa,e,EAITC,SAAU,WACN,OACI,0BAAMjB,SAAU,EAAKU,kBACjB,2BAAOR,KAAK,OAAQgB,IAAK,SAACC,GAAO,EAAKJ,MAAQI,GAAIC,aAAc,EAAKrB,MAAMsB,QAAQC,OACnF,mD,EAMZN,YAAc,WACV,IAAKP,EAAU,EAAKD,MAAfC,OACL,EAAKc,SACD,CAACd,QAAUA,K,EAInBe,aAAe,WACX,OACA,4BACA,8BACK,EAAKzB,MAAMsB,QAAQC,MAExB,4BAAQG,QAAS,WAAO,EAAKT,gBAA7B,eACA,4BAAQS,QAAS,WAAO,EAAK1B,MAAM2B,OAAO,EAAK3B,MAAMe,KAArD,mB,4CAKJ,WACI,IAAIa,EAAOC,KAAKpB,MAAMC,OAC1B,OACA,kBAAC,WAAD,KACKkB,EAAOC,KAAKX,WAAaW,KAAKJ,oB,GA/CdK,aCyFVC,E,4MArFbtB,MAAO,CACLuB,OAAQ,CACN,CAACT,KAAM,QACP,CAACA,KAAM,OACP,CAACA,KAAM,aACP,CAACA,KAAM,OAITU,QAAU,I,EAIZC,aAAc,SAACtB,GACb,EAAKY,SAAS,CACbS,QAASrB,EAAEuB,OAAO/B,S,EAKrBgC,UAAW,SAACxB,GACVA,EAAEC,iBACC,IAAIwB,EAAe,EAAK5B,MAAMwB,QAC3BK,EAAa,EAAK7B,MAAMuB,OAC9B,GAAqB,KAAlBK,EACD,OAAOE,MAAM,yBAIbD,EAAWE,KAAK,CAACjB,KAAMc,IACvB,EAAKb,SAAS,CACZQ,OAASM,EACTL,QAAU,M,EAShBQ,aAAe,SAACC,GACd,IAAIC,EAAc,EAAKlC,MAAMuB,OAC7BW,EAAYC,OAAOF,EAAO,GAC1B,EAAKlB,SACH,CAACmB,iB,EAMLE,WAAa,SAACH,EAAOtC,GACnB,IAAK4B,EAAU,EAAKvB,MAAfuB,OACcA,EAAOU,GACd,KAAWtC,EACvB,EAAKoB,SAAS,CACZQ,Y,4CAKF,WAAU,IAAD,OACKc,EAAGjB,KAAKpB,MAAMuB,OAEde,EADUD,EAAEE,OACYF,EAAEG,KAAK,SAACjB,EAASU,GAE/C,OAAO,kBAAC,EAAD,CAAYpB,QAASU,EAAQkB,IAAKR,EAAQ3B,EAAG2B,EAAOnC,OAAQ,EAAK4C,aAAcxB,OAAQ,EAAKc,aAAc3B,YAAc,EAAK+B,gBAGlI,uBAAGO,UAAU,aAAb,+BAIR,OACE,6BAASA,UAAU,OACjB,2CACA,kBAAC,EAAD,CAAY7C,OAAQsB,KAAKK,aAAchC,IAAK2B,KAAKO,UAAW/B,WAAYwB,KAAKpB,MAAMwB,UACnF,4BACIc,Q,GA/EIjB,aCOEuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.99a0315a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst CourseForm = (props) =>\r\n{\r\n    return (\r\n        <form onSubmit={props.add} >\r\n            <input type=\"text\" value={props.newCurrent} onChange={props.update} />\r\n            <button type=\"submit\" >Add Course</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default CourseForm;","import React, { Component , Fragment} from 'react';\r\n\r\nclass CourseList extends Component{\r\n\r\n    state ={\r\n        isEdit : false\r\n    }\r\n\r\n\r\n    updateCourseItem = e => {\r\n        e.preventDefault();\r\n        this.props.editCourses(this.props.i, this.input.value);\r\n        this.toggleState();\r\n    }\r\n\r\n    //The Edit Form :\r\n    editForm =() =>{\r\n        return(\r\n            <form onSubmit={this.updateCourseItem}>\r\n                <input type=\"text\"  ref={(v) => {this.input = v}} defaultValue={this.props.details.name}/>\r\n                <button>Update Course</button>\r\n            </form>\r\n        )\r\n    }\r\n\r\n    //toggle the state :\r\n    toggleState = () =>{\r\n        let {isEdit} = this.state;\r\n        this.setState(\r\n            {isEdit : !isEdit}\r\n        )\r\n    }\r\n\r\n    renderCourse = () =>{\r\n        return(\r\n        <li>\r\n        <span>\r\n            {this.props.details.name}\r\n        </span>\r\n        <button onClick={() => {this.toggleState()}}>Edit Course</button>\r\n        <button onClick={() => {this.props.delete(this.props.i)}}>Delete Course</button>\r\n        </li>\r\n        )\r\n    }\r\n\r\n    render(){\r\n        let Edit = this.state.isEdit;\r\n    return (\r\n    <Fragment>\r\n        {Edit ? this.editForm() : this.renderCourse()}\r\n    </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CourseList;\r\n","import React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport CourseForm from './components/CourseForm';\nimport CourseList from './components/CourseList';\n\nclass App extends Component{\n  state ={\n    course :[\n      {name: \"HTML\" },\n      {name: \"CSS\" },\n      {name: \"BootStrap\"},\n      {name: \"JS\"}\n\n    ],\n\n    current : \"\"\n  }\n\n  // Update Courses list\n  updateCourse =(e) =>{\n    this.setState({\n     current: e.target.value\n    })\n  }\n\n  // Add new Couese to courses list\n  addCourse =(e) =>{\n    e.preventDefault();\n       let currentValue = this.state.current;\n      let allCourses = this.state.course;\n    if(currentValue  === \"\") {\n      return alert(\"Please Enter Any Data\");\n    }\n    else{\n      \n      allCourses.push({name: currentValue})\n      this.setState({\n        course : allCourses,\n        current : \"\"\n      })  \n    }\n  }\n\n\n\n\n  //Delete course from courses list \n  deleteCourse = (index) =>{\n    let all_courses = this.state.course; \n    all_courses.splice(index, 1);\n    this.setState(\n      {all_courses}\n      )\n  }\n\n\n  //Edit Course Function :\n  editCourse = (index, value) =>{\n    let {course} = this.state;\n    let coursesIndex = course[index];\n    coursesIndex['name'] = value;\n    this.setState({\n      course\n    })\n   }\n\n   \n    render() {\n            const x= this.state.course;\n            const length  = x.length;\n            const courseList = length ? ( x.map( (course , index) => {\n              \n            return <CourseList details={course} key={index}  i={index} update={this.handleChaneg} delete={this.deleteCourse} editCourses ={this.editCourse}/>;\n            })\n            ) : (\n              <p className=\"paragraph\">There is no courses to show</p>\n            )\n            \n            \n      return (\n        <section className=\"App\">\n          <h2>Add Courses</h2>\n          <CourseForm update={this.updateCourse} add={this.addCourse} newCurrent={this.state.current} />\n          <ul>\n             {courseList}   \n          </ul>\n        </section>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}